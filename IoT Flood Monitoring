
#include <WiFi.h> // ESP32 Wi-Fi library
#include <HTTPClient.h> // HTTP client for sending requests

// Ultrasonic sensor pins
const int trigPin = 25; // GPIO for Trigger pin of HC-SR04
const int echoPin = 26; // GPIO for Echo pin of HC-SR04

// Buzzer pin
const int buzzerPin = 27;

// Wi-Fi credentials
const char* ssid = "Your_SSID";         // Replace with your Wi-Fi SSID
const char* password = "Your_PASSWORD"; // Replace with your Wi-Fi Password

// Flood alert settings
const int floodThreshold = 20; // Distance threshold in cm for flood alert

void setup() {
  // Initialize serial communication
  Serial.begin(115200);

  // Initialize GPIOs
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buzzerPin, OUTPUT);

  // Connect to Wi-Fi
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }
  Serial.println("Wi-Fi connected!");
}

void loop() {
  // Measure distance from the ultrasonic sensor
  int distance = measureDistance();

  // Log the measured distance
  Serial.print("Measured Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Check if water level crosses the flood threshold
  if (distance < floodThreshold) {
    Serial.println("Flood detected! Triggering alarm...");
    digitalWrite(buzzerPin, HIGH); // Activate buzzer
    sendFloodAlert(); // Send flood alert via HTTP
  } else {
    digitalWrite(buzzerPin, LOW); // Deactivate buzzer
  }

  delay(2000); // Delay to prevent spamming the server
}

int measureDistance() {
  // Trigger the ultrasonic sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Measure the duration of the echo pulse
  long duration = pulseIn(echoPin, HIGH);

  // Convert duration to distance in cm
  int distance = duration * 0.034 / 2; // Speed of sound in air = 0.034 cm/Âµs
  return distance;
}

void sendFloodAlert() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Replace with your endpoint or API
    String serverUrl = "http://yourserver.com/flood-alert";

    // Start HTTP request
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    // Send flood alert data
    String payload = "{\"alert\":\"Flood detected! Water level is critical.\"}";
    int httpResponseCode = http.POST(payload);

    if (httpResponseCode > 0) {
      Serial.println("Flood alert sent successfully!");
    } else {
      Serial.print("Failed to send alert. HTTP response code: ");
      Serial.println(httpResponseCode);
    }

    http.end(); // Close HTTP connection
  } else {
    Serial.println("Wi-Fi disconnected. Unable to send alert.");
  }
}
